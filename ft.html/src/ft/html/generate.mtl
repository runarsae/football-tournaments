[comment encoding = UTF-8 /]
[module generate('platform:/plugin/ft/model/ft.ecore', 'http://www.eclipse.org/emf/2002/Ecore')]

[template public generateElement(footballTournaments : FootballTournaments)]
[comment @main/]

	[comment
		Generate a HTML file which lists all hosts and links to their tournament pages
		Corresponding web page: https://resultater.nrk.no/fotball/1/turneringer
	/]
	[file ('football-tournaments.html', false, 'UTF-8')]
		<html>
		    <head>
		        <title>Turneringer</title>
		        <meta charset="utf-8"/>
		
		        <link rel="stylesheet" type="text/css" href="css/main.css">
		    </head>
		    <body>
		        <div id="content">
					<h1>Turneringer</h1>
		            [for (host : AbstractHost | footballTournaments.hosts)]
						[generateHostSection(host)/]
					[/for]
		        </div>
		    </body>
		</html>
	[/file]
	
	[comment
		Generate a HTML file for each tournament
	/]
	[for (tournament : Tournament | footballTournaments.hosts.tournaments)]
		[generateTournamentFile(tournament)/]
	[/for]
	
	[comment
		Generate a HTML file for matches in each season for each tournament
	/]
	[for (season : Season | footballTournaments.hosts.tournaments.seasons)]
		[generateSeasonMatchesFile(season)/]
	[/for]

	[comment
		Generate a HTML file for results in each season for each tournament
	/]
	[for (season : Season | footballTournaments.hosts.tournaments.seasons)]
		[generateSeasonResultsFile(season)/]
	[/for]

	[comment
		Generate a HTML file for a table for a double round robin stage in each season for each tournament
		Assumption: Each season has only one stage
	/]
	[for (stage : Stage | footballTournaments.hosts.tournaments.seasons.stages)]
		[let doubleRoundRobinStage : DoubleRoundRobin = stage]
			[generateSeasonTableFile(doubleRoundRobinStage)/]
		[/let]
	[/for]
[/template]

[comment
	##### SUB-TEMPLATES #####
/]

[**
 *	Generate a HTML file for a tournament
 *	Corresponding web page: https://resultater.nrk.no/fotball/1/turneringer/5/2020/tabell
*/]
[template public generateTournamentFile(tournament : Tournament)]
	[file (generateTournamentFilePath(tournament), false, 'UTF-8')]
		<html>
			<head>
				<title>[tournament.name/]</title>
				<meta charset="utf-8"/>

		        <link rel="stylesheet" type="text/css" href="../css/main.css">
		        <link rel="stylesheet" type="text/css" href="../css/tournament.css">
		        <link rel="stylesheet" type="text/css" href="../css/table.css">
		        <link rel="stylesheet" type="text/css" href="../css/matches.css">
			</head>
			<body>
		        <header>
		            <input 
		                id="tournaments-button"
		                type="button" 
		                onclick="location.href='../football-tournaments.html';" 
		                value="&#171; Turneringer"
		            />
		            <div></div>
		
		            <div>
		                <h1>[tournament.name/]</h1>
		                <h2>[getHostName(tournament.host).toUpper()/]</h2>
		            </div>
		
		            <div>
		                <label for="season">SESONG:</label>
		                <select name="season" id="season" onchange="changeSeason()">
							[comment Generate an option for each tournament season /]
							[for (season : Season | sortSeasons(tournament.seasons))]
								[generateSeasonOption(season)/]
							[/for]
		                </select>
		            </div>
		        </header>
		
		        <nav>
		            <div>
		                <button id="matches-button" class="section-button" onclick="changeSection(currentSeason, 'matches')">Terminliste</button>
		                <button id="results-button" class="section-button" onclick="changeSection(currentSeason, 'results')">Resultater</button>
		        	
						[comment If tournament has stages that are of type double round robin, generate a table button /]
						[if (tournament.seasons.stages.oclIsTypeOf(DoubleRoundRobin)->includes(true))]
		                	<button id="table-button" class="section-button" onclick="changeSection(currentSeason, 'table')">Tabell</button>
		            	[/if]
					</div>
		        </nav>

		        <div id="content"></div>
		
		        <script>
		            let currentSeason = document.getElementById("season").value;
		
		            const tableButton = document.getElementById("table-button");
		            let currentSection = typeof(tableButton) != 'undefined' && tableButton != null ? "table" : "results"
		            changeSection(currentSeason, currentSection);
		
		            function changeSeason() {
		                currentSeason = document.getElementById("season").value;
		                changeSection(currentSeason, currentSection);
		            }
		
		            function changeSection(season, section) {
		                currentSection = section;
		
		                // Remove emphasize on section buttons
		                let sectionButtons = document.getElementsByClassName("section-button");
		
		                for (i = 0; i < sectionButtons.length; i++) {
		                    sectionButtons['['/]i].className = sectionButtons['['/]i].className.replace(" active", "");
		                }
		
		                // Emphasize current section button
		                document.getElementById(section + "-button").className += " active";
		
		                // Fetch content
		                let content = document.getElementById("content");
		
		                const page = "[urlify(tournament.name)/]" + "/" + season.replaceAll('/', '-') + "/" + section + ".html";
		
		                var xhttp = new XMLHttpRequest();
		                xhttp.onreadystatechange = function() {
		                    if (this.readyState == 4) {
		                        if (this.status == 200) {
		                        content.innerHTML = xhttp.responseText;
		                        } else if (this.status == 404) {
		                            content.innerHTML = "<b>ERROR</b>: 404 (Not Found)<br><i>" + page + "</i>";
		                        }
		                    }
		                };
		
		                xhttp.open("GET", page, true);
		                xhttp.send();
		            }
		        </script>
			</body>
		</html>
	[/file]
[/template]

[**
 *	Generate a HTML file for matches in a season
 *	Corresponding web page: https://resultater.nrk.no/fotball/1/turneringer/5/2021/kamper
*/]
[template public generateSeasonMatchesFile(season : Season)]
	[file (generateSeasonFilePath(season, 'matches'), false, 'UTF-8')]
		[comment 
			Get unplayed matches, sort them from oldest to newest, group them into match days and sort the match days from oldest to newest
			For each match day, generate a section displaying its matches
		/]
		[for (matches : Sequence(Match) | matchDays(sortMatchesOnDate(getUnplayedMatches(season.stages.rounds.matches), false), false))]
			[generateMatchDaySection(matches)/]
		[/for]
	[/file]
[/template]

[**
 *	Generate a HTML file for results in a season
 *	Corresponding web page: https://resultater.nrk.no/fotball/1/turneringer/5/2021/resultater
*/]
[template public generateSeasonResultsFile(season : Season)]
	[file (generateSeasonFilePath(season, 'results'), false, 'UTF-8')]
		[comment 
			Get played matches, sort them from newest to oldest, group them into match days and sort the match days from newest to oldest
			For each match day, generate a section displaying its matches
		/]
		[for (matches : Sequence(Match) |  matchDays(sortMatchesOnDate(getPlayedMatches(season.stages.rounds.matches), true), true))]
			[generateMatchDaySection(matches)/]
		[/for]
	[/file]
[/template]

[**
 *	Generate a HTML file for a table representing a season with a double round dobin stage
 *	Corresponding web page: https://resultater.nrk.no/fotball/1/turneringer/5/2021/tabell
*/]
[template public generateSeasonTableFile(doubleRoundRobinStage : DoubleRoundRobin)]
	[file (generateSeasonFilePath(doubleRoundRobinStage.season, 'table'), false, 'UTF-8')]
		<h2>[doubleRoundRobinStage.season.tournament.name/] [doubleRoundRobinStage.season.yearIdentifier/]</h2>
		<hr/>
		<table>
			<thead>
			    <tr>
		            <th class="small-padding">#</th>
		            <th class="expand text-left small-padding">Lag</th>
		            <th class="border-left">K</th>
		            <th class="border-left">S</th>
		            <th>U</th>
		            <th>T</th>
		            <th class="border-left">+</th>
		            <th>-</th>
		            <th>+/-</th>
		            <th class="border-left">P</th>
		            <th class="text-left small-padding border-left">Form</th>
			    </tr>
			</thead>
			<tbody>
				[comment For each statistic in table, generate a table row /]
			    [for (statistic : Statistic | doubleRoundRobinStage.table.statistics)]
					[generateTableRow(statistic)/]
			    [/for]
			</tbody>
		</table>
	[/file]
[/template]

[**
 * 	Generate a section for a host, with tournament button-links for tournaments that are arranged by the host
 */]
[template public generateHostSection(host : AbstractHost)]
	<span>[getHostName(host)/]</span>
	<hr/>
	<div class="buttons-grid">
		[comment Generate a button for all tournaments by host /]
	    [for (tournament : Tournament | host.tournaments)]
			[generateTournamentButton(tournament)/]
		[/for]
	</div>
[/template]

[**
 * 	Generate a button for a tournament that links to the tournament's page
 */]
[template public generateTournamentButton(tournament : Tournament)]
    <input 
        type="button" 
        onclick="location.href='[generateTournamentFilePath(tournament)/]';" 
        value="[tournament.name/]"
    />
[/template]

[**
 *	Generate URL to a tournament file
 */]
[template public generateTournamentFilePath(tournament : Tournament) post (trim())]
	[urlify(getHostName(tournament.host)).concat('/').concat(urlify(tournament.name)).concat('.html')/]
[/template]

[**
 * 	Generate an option for a season
 */]
[template public generateSeasonOption(season : Season)]
	<option value="[season.yearIdentifier/]">[season.yearIdentifier/]</option>
[/template]

[**
 *	Generate URL to a specific season file (either table, matches or results)
 */]
[template public generateSeasonFilePath(season : Season, fileString : String) post (trim())]
	[urlify(getHostName(season.tournament.host)).concat('/').concat(urlify(season.tournament.name)).concat('/').concat(urlify(season.yearIdentifier)).concat('/').concat(fileString).concat('.html')/]
[/template]

[**
 * 	Generate a section for a match day, containing rows of matches during that day
 */]
[template public generateMatchDaySection(matches : Sequence(Match))]
	<h3 class="text-center">[capitalizeFirstCharacter(getMatchDay(matches->first()))/]</h3>
	<ul class="matches">
		[for (match : Match | matches)]
			[generateMatchRow(match)/]
		[/for]
	</ul>
[/template]

[**
 * 	Generate a row for a match that is not played yet, containing home club, away club and time of the match
 */]
[template public generateMatchRow(match : Match) ? (match.result.oclIsUndefined())]
    <li class="match">
        [generateHomeClub(match)/]
        <div class="text-center">[getMatchTime(match)/]</div>
		[generateAwayClub(match)/]				
    </li>
[/template]

[**
 * 	Generate a row for a match that is played, containing home club, away club and the result of the match
 */]
[template public generateMatchRow(match : Match) ? (not match.result.oclIsUndefined())]
	<li class="match">
        [generateHomeClub(match)/]
	    <div class="result-final-container text-center">
	        <div class="result-final">[match.result.homeGoalsFinal/] - [match.result.awayGoalsFinal/]</div>
	        [if (match.result.oclIsKindOf(ExtendedTimeResult))]
				<div class="sub-text">eeo</div>
	        [/if]
	    </div>					
	    [generateAwayClub(match)/]
		
		[let extendedTimeResult : ExtendedTimeResult = match.result]
	        <div class="result-additional sub-text text-center">
	            <div>Full tid: [extendedTimeResult.homeGoalsFullTime/] - [extendedTimeResult.awayGoalsFullTime/]</div>
	            [let penaltyShootoutResult : PenaltyShootoutResult = extendedTimeResult]
	            	<div>STR: [penaltyShootoutResult.homeGoalsPenaltyShootout/] - [penaltyShootoutResult.awayGoalsPenaltyShootout/]</div>
	            [/let]
	        </div>
		[/let]
	</li>
[/template]

[**
 *	Generate display of home club name
 */]
[template public generateHomeClub(match : Match) post (trim())]
	<div class="home text-left">[match.homeClub.name/]</div>
[/template]

[**
 *	Generate display of away club name
 */]
[template public generateAwayClub(match : Match) post (trim())]
	<div class="away text-right">[match.awayClub.name/]</div>
[/template]

[**
 *	Generate a table row according to a statistic for a club
 */]
[template public generateTableRow(statistic : Statistic)]
	<tr>
	    <td class="small-padding">[statistic.position/]</td>
	    <td class="small-padding"><b>[statistic.club.name/]</b></td>
	    <td class="border-left">[statistic.played/]</td>
	    <td class="border-left">[statistic.won/]</td>
	    <td>[statistic.drawn/]</td>
	    <td>[statistic.lost/]</td>
	    <td class="border-left">[statistic.goalsFor/]</td>
	    <td>[statistic.goalsAgainst/]</td>
	    <td>[statistic.goalDifference/]</td>
	    <td class="border-left"><b>[statistic.points/]</b></td>
	    <td class="small-padding border-left">
	        <div class="form">
				[comment For each result in the form, generate a dot /]
				[for (result : ResultKind | statistic.form)]
					[generateDot(result)/]
				[/for]
	        </div>
	    </td>
	</tr>
[/template]

[**
 *	Generate a dot according to result (win = green, draw = gray, loss = red)
 */]
[template public generateDot(result : ResultKind) post (trim())]
	[if (result = ResultKind::WIN)]
		[generateDot('green')/]
	[elseif (result = ResultKind::DRAW)]
		[generateDot('gray')/]
	[else]
		[generateDot('red')/]
	[/if]
[/template]

[template public generateDot(color : String)]
	<div class="result-dot [color/]"></div>
[/template]

[**
 *	Get the name of a host (either regional or association)
 */]
[template public getHostName(host : AbstractHost) post (trim())][/template]

[template public getHostName(host : RegionalHost) post (trim())]
	[host.region.name/]
[/template]

[template public getHostName(host : AssociationHost) post (trim())]
	[host.name/]
[/template]

[**
 *	URLify a string by converting it to lower case and replacing spaces with dashes
 */]
[template public urlify(string : String) post (trim())]
	[string.toLower().replace(' ', '-').replace('/', '-')/]
[/template]

[comment
	##### QUERIES #####
/]

[**
 * 	Sort seasons based on year, from newest to oldest
 */]
[query public sortSeasons(seasons : OrderedSet(Season)) : OrderedSet(Season) =
	seasons->sortedBy(season | season.yearIdentifier)->reverse()
/]

[**
 *	Get unplayed matches (has no result)
*/]
[query public getUnplayedMatches(matches : Sequence(Match)) : Sequence(Match) =
	matches->select(match : Match | match.result.oclIsUndefined())
/]

[**
 * 	Get played matches (has result)
 */]
[query public getPlayedMatches(matches : Sequence(Match)) : Sequence(Match) =
	matches->select(match : Match | not match.result.oclIsUndefined())
/]

[**
 *	Sort matches according to date and time, and optionally reverse the order
 */]
[query public sortMatchesOnDate(matches : Sequence(Match), reverse : Boolean) : Sequence(Match) =
	invoke('ft.html.GenerateHelper', 'sortMatchesOnDate(java.util.List, java.lang.Boolean)', Sequence{matches, reverse})
/]

[**
 *	Group matches according to the day the match is played, and optionally reverse the order of the match days
 */]
[query public matchDays(matches : Sequence(Match), reverse : Boolean) : Sequence(Sequence(Match)) =
	invoke('ft.html.GenerateHelper', 'groupOnMatchDays(java.util.List, java.lang.Boolean)', Sequence{matches, reverse})
/]

[**
 *	Get a string representing the date of the match day for a match
 */]
[query public getMatchDay(match : Match) : String =
	invoke('ft.html.GenerateHelper', 'getMatchDay(ft.Match)', Sequence{match})
/]

[**
 *	Get the time a match is played
 */]
[query public getMatchTime(match : Match) : String =
	invoke('ft.html.GenerateHelper', 'getMatchTime(ft.Match)', Sequence{match})
/]

[**
 *	Capitalizes the first character of a string
 */]
[query public capitalizeFirstCharacter(str : String) : String =
	invoke('ft.html.GenerateHelper', 'capitalizeFirstCharacter(java.lang.String)', Sequence{str})
/]

