/**
 */
package ft.provider;

import ft.util.FtAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FtItemProviderAdapterFactory extends FtAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FtItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ft.FootballTournaments} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FootballTournamentsItemProvider footballTournamentsItemProvider;

	/**
	 * This creates an adapter for a {@link ft.FootballTournaments}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFootballTournamentsAdapter() {
		if (footballTournamentsItemProvider == null) {
			footballTournamentsItemProvider = new FootballTournamentsItemProvider(this);
		}

		return footballTournamentsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ft.AssociationHost} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssociationHostItemProvider associationHostItemProvider;

	/**
	 * This creates an adapter for a {@link ft.AssociationHost}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssociationHostAdapter() {
		if (associationHostItemProvider == null) {
			associationHostItemProvider = new AssociationHostItemProvider(this);
		}

		return associationHostItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ft.RegionalHost} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegionalHostItemProvider regionalHostItemProvider;

	/**
	 * This creates an adapter for a {@link ft.RegionalHost}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegionalHostAdapter() {
		if (regionalHostItemProvider == null) {
			regionalHostItemProvider = new RegionalHostItemProvider(this);
		}

		return regionalHostItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ft.Region} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegionItemProvider regionItemProvider;

	/**
	 * This creates an adapter for a {@link ft.Region}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegionAdapter() {
		if (regionItemProvider == null) {
			regionItemProvider = new RegionItemProvider(this);
		}

		return regionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ft.Club} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClubItemProvider clubItemProvider;

	/**
	 * This creates an adapter for a {@link ft.Club}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClubAdapter() {
		if (clubItemProvider == null) {
			clubItemProvider = new ClubItemProvider(this);
		}

		return clubItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ft.Tournament} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TournamentItemProvider tournamentItemProvider;

	/**
	 * This creates an adapter for a {@link ft.Tournament}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTournamentAdapter() {
		if (tournamentItemProvider == null) {
			tournamentItemProvider = new TournamentItemProvider(this);
		}

		return tournamentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ft.Season} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SeasonItemProvider seasonItemProvider;

	/**
	 * This creates an adapter for a {@link ft.Season}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSeasonAdapter() {
		if (seasonItemProvider == null) {
			seasonItemProvider = new SeasonItemProvider(this);
		}

		return seasonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ft.Stage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StageItemProvider stageItemProvider;

	/**
	 * This creates an adapter for a {@link ft.Stage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStageAdapter() {
		if (stageItemProvider == null) {
			stageItemProvider = new StageItemProvider(this);
		}

		return stageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ft.DoubleRoundRobin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoubleRoundRobinItemProvider doubleRoundRobinItemProvider;

	/**
	 * This creates an adapter for a {@link ft.DoubleRoundRobin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDoubleRoundRobinAdapter() {
		if (doubleRoundRobinItemProvider == null) {
			doubleRoundRobinItemProvider = new DoubleRoundRobinItemProvider(this);
		}

		return doubleRoundRobinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ft.SingleElimination} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingleEliminationItemProvider singleEliminationItemProvider;

	/**
	 * This creates an adapter for a {@link ft.SingleElimination}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingleEliminationAdapter() {
		if (singleEliminationItemProvider == null) {
			singleEliminationItemProvider = new SingleEliminationItemProvider(this);
		}

		return singleEliminationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ft.Table} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableItemProvider tableItemProvider;

	/**
	 * This creates an adapter for a {@link ft.Table}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableAdapter() {
		if (tableItemProvider == null) {
			tableItemProvider = new TableItemProvider(this);
		}

		return tableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ft.Statistic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatisticItemProvider statisticItemProvider;

	/**
	 * This creates an adapter for a {@link ft.Statistic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatisticAdapter() {
		if (statisticItemProvider == null) {
			statisticItemProvider = new StatisticItemProvider(this);
		}

		return statisticItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ft.Round} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoundItemProvider roundItemProvider;

	/**
	 * This creates an adapter for a {@link ft.Round}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoundAdapter() {
		if (roundItemProvider == null) {
			roundItemProvider = new RoundItemProvider(this);
		}

		return roundItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ft.Match} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchItemProvider matchItemProvider;

	/**
	 * This creates an adapter for a {@link ft.Match}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchAdapter() {
		if (matchItemProvider == null) {
			matchItemProvider = new MatchItemProvider(this);
		}

		return matchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ft.Result} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResultItemProvider resultItemProvider;

	/**
	 * This creates an adapter for a {@link ft.Result}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResultAdapter() {
		if (resultItemProvider == null) {
			resultItemProvider = new ResultItemProvider(this);
		}

		return resultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ft.ExtendedTimeResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExtendedTimeResultItemProvider extendedTimeResultItemProvider;

	/**
	 * This creates an adapter for a {@link ft.ExtendedTimeResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExtendedTimeResultAdapter() {
		if (extendedTimeResultItemProvider == null) {
			extendedTimeResultItemProvider = new ExtendedTimeResultItemProvider(this);
		}

		return extendedTimeResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ft.PenaltyShootoutResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PenaltyShootoutResultItemProvider penaltyShootoutResultItemProvider;

	/**
	 * This creates an adapter for a {@link ft.PenaltyShootoutResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPenaltyShootoutResultAdapter() {
		if (penaltyShootoutResultItemProvider == null) {
			penaltyShootoutResultItemProvider = new PenaltyShootoutResultItemProvider(this);
		}

		return penaltyShootoutResultItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (footballTournamentsItemProvider != null) footballTournamentsItemProvider.dispose();
		if (associationHostItemProvider != null) associationHostItemProvider.dispose();
		if (regionalHostItemProvider != null) regionalHostItemProvider.dispose();
		if (regionItemProvider != null) regionItemProvider.dispose();
		if (clubItemProvider != null) clubItemProvider.dispose();
		if (tournamentItemProvider != null) tournamentItemProvider.dispose();
		if (seasonItemProvider != null) seasonItemProvider.dispose();
		if (stageItemProvider != null) stageItemProvider.dispose();
		if (doubleRoundRobinItemProvider != null) doubleRoundRobinItemProvider.dispose();
		if (singleEliminationItemProvider != null) singleEliminationItemProvider.dispose();
		if (tableItemProvider != null) tableItemProvider.dispose();
		if (statisticItemProvider != null) statisticItemProvider.dispose();
		if (roundItemProvider != null) roundItemProvider.dispose();
		if (matchItemProvider != null) matchItemProvider.dispose();
		if (resultItemProvider != null) resultItemProvider.dispose();
		if (extendedTimeResultItemProvider != null) extendedTimeResultItemProvider.dispose();
		if (penaltyShootoutResultItemProvider != null) penaltyShootoutResultItemProvider.dispose();
	}

}
